# -*- coding: utf-8 -*-
"""BMI Calculator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fy1uvrTro3Wf50v1Svb5x81X9cj4RaND
"""

import streamlit as st
import pandas as pd
import os

# Title
st.title("BMI Calculator ðŸ’ª")

# User inputs
name = st.text_input("Enter your name")
age = st.number_input("Enter your age", min_value=1, max_value=120)
gender = st.selectbox("Select your gender", ["Male", "Female", "Other"])
height = st.number_input("Enter height (in cm)", min_value=50.0, max_value=300.0)
weight = st.number_input("Enter weight (in kg)", min_value=10.0, max_value=300.0)

# Function to calculate BMI
def calculate_bmi(weight, height_cm):
    height_m = height_cm / 100
    bmi = weight / (height_m ** 2)
    return round(bmi, 2)

# Function to categorize BMI
def bmi_category(bmi):
    if bmi < 18.5:
        return "Underweight"
    elif 18.5 <= bmi < 25:
        return "Normal"
    elif 25 <= bmi < 30:
        return "Overweight"
    else:
        return "Obese"

# Function for meal & exercise suggestions
def get_suggestions(category):
    plans = {
        "Underweight": {
            "meal": "High-protein meals, nuts, dairy, peanut butter.",
            "exercise": "Light yoga, strength training, walking."
        },
        "Normal": {
            "meal": "Balanced diet: veggies, fruits, proteins, grains.",
            "exercise": "Jogging, cycling, yoga, moderate strength training."
        },
        "Overweight": {
            "meal": "Low-carb meals, lean proteins, avoid fried food.",
            "exercise": "Brisk walking, swimming, light cardio."
        },
        "Obese": {
            "meal": "Salads, soups, portion control, low sugar intake.",
            "exercise": "Slow walking, chair exercises, breathing exercises."
        }
    }
    return plans[category]["meal"], plans[category]["exercise"]

# Calculate and show results
if st.button("Calculate BMI"):
    if name and height and weight:
        bmi = calculate_bmi(weight, height)
        category = bmi_category(bmi)
        meal, exercise = get_suggestions(category)

        st.success(f"Hello {name}, your BMI is {bmi} ({category})")
        st.info(f"Meal Plan Suggestion: {meal}")
        st.info(f"Exercise Suggestion: {exercise}")

        # Save data to CSV
        record = pd.DataFrame([[name, age, gender, height, weight, bmi, category]],
                              columns=["Name", "Age", "Gender", "Height(cm)", "Weight(kg)", "BMI", "Category"])

        if os.path.exists("bmi_data.csv"):
            record.to_csv("bmi_data.csv", mode='a', header=False, index=False)
        else:
            record.to_csv("bmi_data.csv", index=False)
        st.success("Your data has been saved!")
    else:
        st.warning("Please fill all the details.")

if st.checkbox("Show saved records"):
    if os.path.exists("bmi_data.csv"):
        df = pd.read_csv("bmi_data.csv")
        st.dataframe(df)
    else:
        st.write("No data found.")

